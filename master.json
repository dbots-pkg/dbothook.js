{"meta":{"generator":"0.9.0","format":20,"date":1586121547254},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <img src=\"static/logo.png\" alt=\"dbothook.js logo\" width=\"200\" />\n  </p>\n  <p>A webhook receiver for all botlists.</p>\n  <p>\n    <a href=\"https://www.npmjs.com/package/dbothook\"><img src=\"https://img.shields.io/npm/v/dbothook.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/dbothook\"><img src=\"https://img.shields.io/npm/dt/dbothook.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/dbots-pkg/dbothook.js\"><img src=\"https://img.shields.io/david/dbots-pkg/dbothook.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <br/>\n    <a href=\"https://github.com/dbots-pkg/dbothook.js/actions?query=workflow%3A%22Source+code+linting%22\"><img src=\"https://github.com/dbots-pkg/dbothook.js/workflows/Source%20code%20linting/badge.svg\" alt=\"Linting state\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/dbothook/\"><img src=\"https://nodei.co/npm/dbothook.png\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n<!-- omit in toc -->\n# Table of Contents\n- [About](#about)\n- [Installing](#installing)\n- [Example](#example)\n- [Supported Services](#supported-services)\n- [Contribution](#contribution)\n- [Other Links](#other-links)\n\n## About\n`dbothook` helps [Discord](https://discordapp.com) bot developers recieve webhook events from multiple bot lists. You can create an express application straight from the hook or integrate endpoints into an existing application.\n\n## Installing\nYou can install dbothook by running this command:\n```sh\n# Stable\nnpm i dbothook\nyarn add dbothook\n\n# Master\nnpm i dbots-pkg/dbothook.js#master\nyarn add ssh://github.com/dbots-pkg/dbothook.js#master\n```\n\n## Example\n```js\nconst DBotHook = require('dbothook');\nconst hook = new DBotHook({\n    authSecrets: {\n        topgg: '…',\n        discordboats: '…',\n        discordbotlist: '…',\n        botsfordiscord: '…'\n    }\n});\n\nhook.listen(5478);\nhook.on('called', event => {\n  // Give them some perks...\n});\n\n// This should open endpoints for each bot list\n// For example, you can set your webhook URL to \"https://some.site/topgg\" and start collecting requests.\n```\n\n## Supported Services\n| Service | Key | Returns `botId`? | Returns `username` & `discriminator`? |\n| :-- | :-- | :-: | :-: |\n| [Arcane Bot Center](https://arcane-center.xyz/) | `arcanebotcenter` | ✅ | ✅ |\n| [Botlist.space](https:/botlist.space/) | `botlistspace` | ✅ | ✅ |\n| [Bots For Discord](https://botsfordiscord.com/) | `botsfordiscord` | ✅ | ❌ |\n| [Discord Boats](https://discord.boats/) | `discordboats` | ✅* | ✅ |\n| [Discord Bot List](https://discordbotlist.com/) | `discordbotlist` | ❌ | ✅ |\n| [Glenn Bot List](https://glennbotlist.xyz/) | `glennbotlist` | ✅ | ❌ |\n| [List My Bots](https://listmybots.com/) | `listmybots` | ✅ | ❌ |\n| [Mythical Bots](https://mythicalbots.xyz/) | `mythicalbots` | ❌ | ❌ |\n| [Top.GG](https://top.gg/) | `topgg` | ✅ | ❌ |\n\n*The bot ID from Discord Boats events will be recieved from the URL or the avatar URL in the payload. If your bot has a vanity URL (assuming Discord Boats posts that) and does not have an avatar, the bot ID will be `null`.\n\n## Contribution\nAny contribution may be useful for the package! Make sure when making issues or PRs that the issue has not been addressed yet in a past issue/PR.\n\n## Other Links\n- [NPM](https://npmjs.org/package/dbothook)\n- [Yarn](https://yarn.pm/dbothook)\n- [JSDelivr](https://www.jsdelivr.com/package/npm/dbothook)\n- [David (Dependency Watcher)](https://david-dm.org/dbots-pkg/dbothook.js)\n- [dbots GitHub Organization](https://github.com/dbots-pkg)\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"DBotHook","description":"A class that posts server count to listing site(s).","construct":{"name":"DBotHook","params":[{"name":"options","description":"The options needed to construct the hook","optional":true,"type":[[["HookOptions"]]]}]},"props":[{"name":"endpointsAdded","description":"Whether or not endpoints has been added","type":[[["boolean"]]],"meta":{"line":21,"file":"index.js","path":"src"}},{"name":"authSecrets","description":"The authorization secrets the hook is using","type":[[["AuthorizationSecrets"]]],"meta":{"line":27,"file":"index.js","path":"src"}},{"name":"app","description":"The express application being used","type":[[["Express"]]],"meta":{"line":33,"file":"index.js","path":"src"}},{"name":"server","description":"The server created from {@link #listen}","nullable":true,"type":[[["httpServer"]]],"meta":{"line":39,"file":"index.js","path":"src"}}],"methods":[{"name":"addEndpoints","description":"Loads endpoints into the application","params":[{"name":"prefix","description":"The prefix to add before the path (which would be the {@link ServiceKey})","optional":true,"default":"'/'","type":[[["string"]]]}],"meta":{"line":46,"file":"index.js","path":"src"}},{"name":"listen","description":"Convenience method for app.listen()","see":["https://expressjs.com/en/4x/api.html#app.listen"],"params":[{"name":"args","description":"The args that are sent to the application","variable":true,"type":[[["any"]]]}],"meta":{"line":67,"file":"index.js","path":"src"}}],"events":[{"name":"request","description":"Emitted when any request is recieved.","params":[{"name":"event","description":"The event representing this","type":[[["Event"]]]}],"meta":{"line":26,"file":"Endpoint.js","path":"src"}},{"name":"failedAuthentication","description":"Emitted when a request fails to authenticate itself.","params":[{"name":"event","description":"The event representing this","type":[[["Event"]]]}],"meta":{"line":48,"file":"Endpoint.js","path":"src"}},{"name":"called","description":"Emitted when a request succeeds and has parsed the payload.","params":[{"name":"event","description":"The event representing this","type":[[["RichEvent"]]]}],"meta":{"line":72,"file":"Endpoint.js","path":"src"}},{"name":"error","description":"Emitted when a response has failed internally.","params":[{"name":"event","description":"The event representing this","type":[[["ErrorEvent"]]]}],"meta":{"line":85,"file":"Endpoint.js","path":"src"}}],"meta":{"line":12,"file":"index.js","path":"src"}},{"name":"ArcaneBotCenter","access":"private","meta":{"line":6,"file":"ArcaneBotCenter.js","path":"src/endpoints"}},{"name":"BotListSpace","access":"private","meta":{"line":6,"file":"BotListSpace.js","path":"src/endpoints"}},{"name":"BotsForDiscord","see":["https://docs.botsfordiscord.com/webhooks/receiving-votes"],"access":"private","meta":{"line":7,"file":"BotsForDiscord.js","path":"src/endpoints"}},{"name":"DiscordBoats","see":["https://docs.discord.boats/topics/webhooks"],"access":"private","meta":{"line":7,"file":"DiscordBoats.js","path":"src/endpoints"}},{"name":"DiscordBotList","see":["https://github.com/discordbots/botlister/wiki/User-Object"],"access":"private","meta":{"line":7,"file":"DiscordBotList.js","path":"src/endpoints"}},{"name":"GlennBotList","access":"private","meta":{"line":6,"file":"GlennBotList.js","path":"src/endpoints"}},{"name":"ListMyBots","access":"private","meta":{"line":6,"file":"ListMyBots.js","path":"src/endpoints"}},{"name":"MythicalBots","access":"private","meta":{"line":6,"file":"MythicalBots.js","path":"src/endpoints"}},{"name":"TopGG","see":["https://top.gg/api/docs#webhooks"],"access":"private","meta":{"line":7,"file":"TopGG.js","path":"src/endpoints"}}],"interfaces":[],"typedefs":[{"name":"ServiceKey","description":"A key that a service uses to identify itself. Available services:\n* arcanebotcenter\n* botlistspace\n* botsfordiscord\n* discordboats\n* discordbotlist\n* glennbotlist\n* listmybots\n* mythicalbots\n* topgg","type":[[["string"]]],"meta":{"line":75,"file":"index.js","path":"src"}},{"name":"RichEventType","description":"The type of event the {@link RichEvent} is. This would be most commonly `vote`.\n* vote\n* like (from listmybots)\n* unlike (from listmybots)","type":[[["string"]]],"meta":{"line":89,"file":"index.js","path":"src"}},{"name":"AuthorizationSecrets","description":"An object that includes authorization secrets for all botlists.\nEach key can either have a secret or be `true` to accept *all* requests regardless of authorization.\n\nNote: `arcanebotcenter` and `botlistspace` gives you a secret instead of setting one.","type":[[["Object","<"],["ServiceKey",", ("],["string","|"],["boolean",")>"]]],"meta":{"line":97,"file":"index.js","path":"src"}},{"name":"HookOptions","description":"Options for a hook.","type":[[["Object"]]],"props":[{"name":"authSecrets","description":"The authorization secrets the hook will use","optional":true,"type":[[["AuthorizationSecrets"]]]},{"name":"app","description":"The application to use, will initiate a new application if not defined","optional":true,"type":[[["Express"]]]}],"meta":{"line":105,"file":"index.js","path":"src"}},{"name":"Event","description":"A generic event object.","type":[[["Object"]]],"props":[{"name":"list","description":"The service endpoint this event occured in","type":[[["ServiceKey"]]]},{"name":"request","description":"The request that emitted this event","type":[[["Request"]]]}],"meta":{"line":112,"file":"index.js","path":"src"}},{"name":"RichEvent","description":"An event object that is returned and parsed at the end of an endpoint call.\nSee the README.md of dbothook.js to see which service returns what values.","type":[[["Object"]]],"props":[{"name":"list","description":"The service endpoint this event occured in","type":[[["ServiceKey"]]]},{"name":"request","description":"The request that emitted this event","type":[[["Request"]]]},{"name":"data","description":"The raw data that the service posted","type":[[["Object"]]]},{"name":"timestamp","description":"The time when this event was emitted","type":[[["number"]]]},{"name":"type","description":"The type of event","type":[[["RichEventType"]]]},{"name":"test","description":"Whether or not the event was a test sent from the service.\nMake sure you check this first before processing anything.","type":[[["boolean"]]]},{"name":"userId","description":"The user's ID that emitted the event","type":[[["string"]]]},{"name":"botId","description":"The bot's ID that the user is calling the event towards","optional":true,"type":[[["string"]]]},{"name":"username","description":"The user's username","optional":true,"type":[[["string"]]]},{"name":"discriminator","description":"The user's discriminator (i.e. `#0001`)","optional":true,"type":[[["string"]]]}],"meta":{"line":123,"file":"index.js","path":"src"}},{"name":"ErrorEvent","description":"A event emitted after an error.","type":[[["Object"]]],"props":[{"name":"list","description":"The service endpoint this event occured in","type":[[["ServiceKey"]]]},{"name":"request","description":"The request that emitted this event","type":[[["Request"]]]},{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":143,"file":"index.js","path":"src"}}],"externals":[]}